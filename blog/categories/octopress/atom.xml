<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categorie: Octopress | I'm Jony]]></title>
  <link href="http://jonyfang.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://jonyfang.com/"/>
  <updated>2016-04-18T14:56:54+08:00</updated>
  <id>http://jonyfang.com/</id>
  <author>
    <name><![CDATA[Jony Fang]]></name>
    <email><![CDATA[jony.chunfang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从 Github 恢复 Octopress 到本地]]></title>
    <link href="http://jonyfang.com/blog/2015/12/07/recover_your_local_octopress_repository/"/>
    <updated>2015-12-07T20:08:00+08:00</updated>
    <id>http://jonyfang.com/blog/2015/12/07/recover_your_local_octopress_repository</id>
    <content type="html"><![CDATA[<p class="info">当遇到自己换到一台新的电脑，或本地的 octopress 环境出现了问题，我们都可以从 Github 恢复 Octopress 到本地，在了解了之前的部署操作后这里就很简单了的,进入正题吧。
<br />
(附部署操作：<a href="http://jonyfang.com/blog/2015/10/16/starting_blog_with_octopress_2/">基于 Octopress &amp; Github Pages 搭建博客（二）</a>)</p>
<!-- more -->

<p>Github 远程目录有两个分支，一个<strong><code>master</code></strong>，一个 <strong><code>source</code></strong>，首先把 <code>source</code> 分支 <code>clone</code> 下来:</p>

<p>{% codeblock lang:ruby %}
$ git clone -b source git@github.com:username/username.github.io.git octopress
{% endcodeblock %}</p>

<p>进入 octopress 目录，安装 Octopress 所需要的依赖库（dependencies）：</p>

<p>{% codeblock lang:ruby %}
$ cd octopress
$ gem install bundler
$ bundle install
{% endcodeblock %}</p>

<p>接着执行如下命令，提示后，输入 Github 仓库的 URL （例如：git@github.com:username/username.github.io.git）：</p>

<p>{% codeblock lang:ruby %}
$ rake setup_github_pages
{% endcodeblock %}</p>

<p>最后删除生成的 <code>_deploy</code>，克隆 <code>master</code> 分支到本地：</p>

<p>{% codeblock lang:ruby %}
$ rm -rf _deploy
$ git clone git@github.com:username/username.github.io.git _deploy
{% endcodeblock %}</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 适配 OS X El Capitan]]></title>
    <link href="http://jonyfang.com/blog/2015/11/08/octopress_adapt_to_elcapitan/"/>
    <updated>2015-11-08T16:30:00+08:00</updated>
    <id>http://jonyfang.com/blog/2015/11/08/octopress_adapt_to_elcapitan</id>
    <content type="html"><![CDATA[<p class="info">这几天装上 OS X El Capitan ，Time Machine 恢复后测试 Octopress 遇到无法使用问题，这里总结下问题的解决过程。</p>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一.解决办法</a>    <ul>
      <li><a href="#rvm" id="markdown-toc-rvm">1.1. 安装 RVM</a></li>
      <li><a href="#ruby-223" id="markdown-toc-ruby-223">1.2. 安装 Ruby 2.2.3</a></li>
      <li><a href="#octopress-" id="markdown-toc-octopress-">1.3. 安装 Octopress 依赖库</a></li>
    </ul>
  </li>
</ul>

<!-- more -->

<p>首先打开终端，运行：</p>

<p>{% codeblock lang:ruby %}
 $ rake preview
{% endcodeblock %}</p>

<p>报错如下：</p>

<p>{% codeblock lang:ruby %}
$ rakepreviewStarting to watchsourcewith Jekyll and Compass. Starting Rack on port</p>

<p>4000rake aborted!Errno::ENOENT: No such file or directory -</p>

<p>compass/Users/user/git/octopress/Rakefile:85:in</p>

<p>spawn/Users/user/git/octopress/Rakefile:85:in block inTasks:TOP=&gt; preview
{% endcodeblock %}</p>

<p>在没有升级 OS X EI Capitan 之前一切如常，首先想到是不是 Ruby 的问题</p>

<p>{% codeblock lang:ruby %}
 $ ruby -v</p>

<p>#输出
 ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]
{% endcodeblock %}</p>

<p>和以前一样还是 2.0.0 版本，到官网查看最新版本是 2.2.3，多次尝试更新 <code>ruby</code> 失败。</p>

<h2 id="section">一.解决办法</h2>
<p>更新 Ruby 可以通过 <code>rbenv</code> 或 <code>RVM</code>，因为我之前安装是通过 <code>RVM</code> 的方式，这里自己也是通过 <code>RVM</code> 的方式解决的。（附 Google 看到的：<a href="https://gorails.com/setup/osx/10.11-el-capitan">rbenv 更新 Ruby 方法</a>）</p>

<h3 id="rvm">1.1. 安装 RVM</h3>

<p>{% codeblock lang:ruby %}
 $ curl -L https://get.rvm.io | bash -s stable –ruby
{% endcodeblock %}</p>

<p class="addition">这里自己安装 <strong>RVM</strong> 过程中遇到安装冲突的情况，通过下面的命令清理缓存后恢复了。<code>$ rm -rf /usr/local/.git</code></p>

<h3 id="ruby-223">1.2. 安装 Ruby 2.2.3</h3>

<p>{% codeblock lang:ruby %}
 $ rvm install 2.2.3
 $ rvm use 2.2.3
 $ rvm rubygems latest
{% endcodeblock %}</p>

<p>查看下 Ruby 版本:</p>

<p>{% codeblock lang:ruby %}
 $ ruby -v
 $ ruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin14]
{% endcodeblock %}</p>

<p>啊哈，切换过来了，其实也很简单，到这里就修复了吗？其实还没有，如你所见还有第4步。</p>

<h3 id="octopress-">1.3. 安装 Octopress 依赖库</h3>

<p>{% codeblock lang:ruby %}
 $ cd octopress
 $ sudo gem install bundler
 $ bundle install
{% endcodeblock %}</p>

<p>当 bundler 安装完毕之后，来测试下 <code>rake</code> 命令是否修复了：</p>

<p>{% codeblock lang:ruby %}
 $ rake generate
 ## Generating Site with Jekyll
    write source/stylesheets/screen.css
Configuration file: /Users/JonyFang/Desktop/octopress/_config.yml
            Source: source
       Destination: public
      Generating… 
                    done.
 Auto-regeneration: disabled. Use –watch to enable.
{% endcodeblock %}</p>

<p>可以了～</p>

<p>如果你也同样遇到升级 OS X EI Capitan 后 Octopress 无法使用的情况，希望能对你有所帮助。</p>

<blockquote>
  <p>本文参考：
<br /><br />
<a href="https://github.com/imathis/octopress/issues/1749">When I upgraded the Mac system, I can’t Preview</a>
<br /><br />
<a href="https://gorails.com/setup/osx/10.11-el-capitan">Setup Ruby On Rails on Mac OS X 10.11 El Capitan</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 Octopress &amp; Github Pages 搭建博客（二）]]></title>
    <link href="http://jonyfang.com/blog/2015/10/16/starting_blog_with_octopress_2/"/>
    <updated>2015-10-16T02:37:44+08:00</updated>
    <id>http://jonyfang.com/blog/2015/10/16/starting_blog_with_octopress_2</id>
    <content type="html"><![CDATA[<p class="info">经过<a href="http://jonyfang.github.io/blog/2015/10/13/ji-yu-octopress-he-github-da-jian-bo-ke/">上一篇</a>，我们在本地搭出了 Octopress 雏形，这一篇首先我们要将本地的 Octopress 博客部署到 Github Pages ，然后发布一篇博文。部署过程中分析了原理，可能会比较枯燥，但是能让我们更了解 Octopress，所以我依旧坚持写下来了。
<br /><br />
废话少说，开工～</p>
<!-- more -->

<ul id="markdown-toc">
  <li><a href="#octopress--github-pages" id="markdown-toc-octopress--github-pages">一. 将 Octopress 部署到 Github Pages</a>    <ul>
      <li><a href="#github-repository" id="markdown-toc-github-repository">1.1. 新建 Github repository</a></li>
      <li><a href="#github-pages" id="markdown-toc-github-pages">1.2. 配置 Github Pages</a></li>
      <li><a href="#section" id="markdown-toc-section">1.3. 生成并部署站点</a></li>
    </ul>
  </li>
  <li><a href="#section-1" id="markdown-toc-section-1">二. 发布博文过程</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">2.1. 新建一篇博文</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">2.2. 预览新建的博文</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">2.3. 发布新建的博文</a></li>
    </ul>
  </li>
</ul>

<h2 id="octopress--github-pages">一. 将 Octopress 部署到 Github Pages</h2>

<p>Github 大家应该都有了解过，也是我很喜欢的平台之一，功能真心强大并且可免费使用，这里我们拿来托管我们的博客。</p>

<h3 id="github-repository">1.1. 新建 Github repository</h3>

<p>注册 Github 账号，新建 <a href="https://github.com/new">Github repository</a>。<code>项目名称</code>（Repository name）命名格式为 <code>username.github.io</code> ，<code>username</code> 是你的 <code>Github 用户名</code>（或 organization name，这里和后面我们先不讨论 origanization）。例如我的用户名是 JonyFang，所以输入 JonyFang.github.io 即可。点击 <code>Create repository</code> 创建。</p>

<p class="info">创建完后不要添加任何内容，另外自己过程中产生了两个疑问
<br />
1.为什么用 github.io 而不是 github.com？
<br />
2.为什么是 Repository name 一定要按照 username.github.io 填写？</p>

<p>第一个问题，<a href="https://github.com/blog/1452-new-github-pages-domain-github-io#security-vulnerability">这里</a>解释了为什么把 <code>github.com</code> 改为了 <code>github.io</code>，简而言之是为了安全。</p>

<p>第二个问题，和 Github 内部的结构有关，其次后面会通过 URL 截取填写的 <code>username.github.io</code> 作为博客域名。这样填写格式与 Github 内部结构的具体联系还需要再研究下。若有大神围观，望指教下：）</p>

<h3 id="github-pages">1.2. 配置 Github Pages</h3>

<p>终端执行如下命令：</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ rake setup_github_pages
{% endcodeblock %}</p>

<p>该命令会要求我们输入 Github 仓库的 URL 。复制粘贴下我们新建仓库的 <code>SSH</code> 或 <code>HTTPS</code> URL 即可。
（例如：git@github.com:username/username.github.io.git）</p>

<p>那么这里 rake setup_github_pages 做了什么呢？</p>

<p>用户（users）的 Github Pages 使用 <code>master</code> 分支作为 <code>Web 服务</code>（web server）的公开目录，为我们的 <code>Pages url</code> （http://username.github.io）提供内容文件。因此，我们会有这样的需求，<code>source</code> 分支用来做与<code>博客源码</code>相关的事（存放全部博客源码），<code>master</code> 分支上 commit 生成的博客内容<code>供 Web 访问</code>。而 Octopress 帮我们把这件事给搞定了，通过这行 code（好 NB～）。</p>

<p class="info">下面具体分析下 Octopress 是怎么做的（可通过查看 Rakefile 得知）：</p>

<p>(1). 命令要求我们输入 Github Pages 仓库的 URL，也就是我们新建的名为 username.github.io 仓库的 URL。这样命名是为了通过字符串截取 URL 拿到子串（http://username.github.io）作为我们博客的域名；</p>

<p>{% codeblock lang:ruby %}
  # Rakefile 中可查看 URL 截取方式：
  repo_url = get_stdin(“Repository url: “)
{% endcodeblock %}</p>

<p>(2). 将指向（pointing to）imathis/octopress 远程库的名字 <code>‘origin’</code> 改为 <code>‘octopress’</code>；</p>

<p>Git clone 一个仓库时，会将 clone 下来的仓库命名为 origin，没有限定 clone 条件的情况下，会下载仓库中所有数据，并建立一个指向该仓库 master 分支的指针，本地命名为 <code>origin/master</code>。</p>

<p>当我们 clone 了 octopress 仓库，执行如下命令可看到远程仓库信息：</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ git remote -v</p>

<p># 输出如下，可看到远程仓库名为 origin
  origin	git://github.com/imathis/octopress.git (fetch)
  origin	git://github.com/imathis/octopress.git (push)
{% endcodeblock %}</p>

<p><code>Rakefile</code> 中可看出是通过如下的方式，将 origin 改为 octopress:</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile
  system “git remote rename origin octopress”
{% endcodeblock %}</p>

<p>这里内部执行了命令 <code>git remote rename origin octopress</code>，当 <code>rake setup_github_pages</code> 执行完毕，再 <code>git remote -v</code> 发现远程库名改为了 octopress。</p>

<p>{% codeblock lang:ruby %}
  $ git remote -v
  # 输出如下
  octopress	  git://github.com/imathis/octopress.git (fetch)
  octopress	  git://github.com/imathis/octopress.git (push)
{% endcodeblock %}</p>

<p>(3). 添加你的 Github Pages 仓库作为默认的 origin remote，并将远程库中指向 imathis/octopress 中 master 分支的指针指向现在的 origin（即 username/username.github.io）的 master 分支，</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile
  system “git remote add origin #{repo_url}”
  system “git config branch.master.remote origin”
{% endcodeblock %}</p>

<p>当 <code>rake setup_github_pages</code> 执行完毕查看远程库，可以看到远程库 origin 指向了 Github Pages。</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ git remote -v</p>

<p># 输出信息如下
  octopress	git://github.com/imathis/octopress.git (fetch)
  octopress	git://github.com/imathis/octopress.git (push)
  origin	git@github.com:JonyFang/JonyFang.github.io.git (fetch)
  origin	git@github.com:JonyFang/JonyFang.github.io.git (push)
{% endcodeblock %}</p>

<p>到这里，应该能猜到上一步将指向 <code>imathis/octopress</code> 远程库的名字 <code>origin</code> 改为 <code>octopress</code> 的原因了。</p>

<p>(4). 将本地 master 分支名字从 <code>master</code> 改为 <code>source</code></p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile
  system “git branch -m master source”
{% endcodeblock %}</p>

<p>执行如下命令查看本地分支（拿到第6条解释为什么要改名为 source）：</p>

<p>{% codeblock lang:ruby %}
  $ git branch</p>

<p># 输出如下
  * source
{% endcodeblock %}</p>

<p>(5). 根据提供的 Github Pages 仓库的 <code>SSH</code> 或 <code>HTTPS</code> 的 URL，截取仓库名 <code>username.github.io</code> 作为博客的 URL（上面 1 有提到）。然后将 octopress 目录下 <code>_config.yml</code> 文件中 url 参数值改为 <code>http：//username.github.io</code>。</p>

<p>{% codeblock lang:ruby %}
  # octopress 下 Rakefile 查看</p>

<p>url = blog_url(user, project, source_dir)
  jekyll_config = IO.read(‘_config.yml’)
  jekyll_config.sub!(/^url:.*$/, “url: #{url}”)
  File.open(‘_config.yml’, ‘w’) do |f|
  f.write jekyll_config
{% endcodeblock %}</p>

<p>(6). 在 octopress 目录下新建 <code>_deploy</code> 目录，并在 _deploy目录下新建 <code>master</code> 分支；</p>

<p>前面4 ，我们将本地 master 分支名字从 <code>master</code> 改为 <code>source</code>，这里一起分析下原因。4和6放在一起容易理解点。</p>

<p>其实本地 octopress 博客部署到 Github Pages 之后，远程 Github 下会有两个分支， <code>master</code> 和 <code>source</code>。远程 <code>master</code> 分支作为 <code>Web 服务</code>公开目录，当你访问 <code>http://username.github.io</code> 时，提供网站内容；远程 <code>source</code> 分支存放的是整个 <code>octopress 框架</code>的源码。</p>

<p>之所以第4步将本地 <code>master</code> 改为 <code>source</code>，是为了把 <code>master 指针</code>让出来，让它指向这一步（6）新建的 <code>_deploy</code> 目录下的 master 分支。这样，<code>octopress/_deploy</code> 目录下的本地 master 分支 就对应了 Github Pages 远程库中的 master 分支，本地 source 分支同理。</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile 
  cd “#{deploy_dir}” do
  system “git init”
  system ‘echo “My Octopress Page is coming soon …” &gt; index.html’
  system “git add .”
  system “git commit -m "Octopress init"”
  system “git branch -m gh-pages” unless branch == ‘master’
  system “git remote add origin #{repo_url}”
{% endcodeblock %}</p>

<p>最后修改了 <code>Rakefile</code> 中 <code>deploy_default</code> 和 <code>deploy_branch</code> 变量的初始值：</p>

<p>{% codeblock lang:ruby %}
  # deploy 时执行的命令，”push” 为 Rakefile 中定义的一个 rake task
  deploy_default = “push” # 初始为 “rsync”</p>

<p># deploy 时执行上述 rake task 命令 “push” 到 “master” 分支
  deploy_branch  = “master” # 初始为 “gh-pages”
{% endcodeblock %}</p>

<p>再回头来看 <code>rake setup_github_pages</code> ，是不是清晰多了呢？</p>

<h3 id="section">1.3. 生成并部署站点</h3>

<p>执行如下命令，（将 <code>octopress/_deploy</code> 下数据 push 到 <code>master</code> 分支）：</p>

<p>{% codeblock lang:ruby %}
  $ sudo rake generate
  $ sudo rake deploy
{% endcodeblock %}</p>

<p>这时在浏览器输入 <code>http://username.github.io</code> 就可以访问你的博客网页啦～</p>

<p>最后别忘了 commit 你的 <code>octopress 框架源码</code>到 <code>source</code> 分支：</p>

<p>{% codeblock lang:ruby %}
  $ git add .
  $ git commit -m’init’  #init 可随意填写
  $ git push origin source
{% endcodeblock %}</p>

<p>好，到这里，如果顺利完成前面所有内容的话，我们已经将 <code>Octopress</code> 部署到 <code>Github Pages</code> 了。如果你想换成自己的域名可以参考这里的方法（<a href="http://octopress.org/docs/deploying/github/#custom_domains">Custom Domains</a>），不再赘述了。</p>

<p class="info">这里分析下，<code>rake generate</code> 和 <code>rake deploy</code>。</p>

<p>rake generate：生成 <code>jekyll</code> 站点（Generating Site with Jekyll）</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile
  system “compass compile –css-dir #{source_dir}/stylesheets”
  system “jekyll build”
{% endcodeblock %}</p>

<p>rake deploy：将站点部署到 <code>Github Pages</code>。由于 <code>_deploy</code> 目录所代表的本地仓库的 <code>master</code> 分支对应 <code>Github Pages</code> 远程仓库的 <code>master</code> 分支，该分支目录的内容即 <code>Github Pages</code> 在互联网上供公开访问的站点内容。因此这里做的主要就是将改动的内容（博客、DIY 布局等…） copy 到 <code>_deploy</code> 目录下，然后将此修改 push 到 <code>Github Pages</code> 远程库的 <code>master</code> 分支。</p>

<ol>
  <li>
    <p>查看是否在 <code>preview-mode</code>(预览模式)，有则删除，重新执行 <code>rake generate</code>；</p>
  </li>
  <li>
    <p>将 <code>octopress/source</code> 目录下的文件拷贝到 <code>octopress/public</code> 目录下；</p>
  </li>
  <li>
    <p>进入 <code>octopress/_deploy</code> 目录，执行 <code>git pull</code> 操作；</p>
  </li>
  <li>
    <p>将 <code>octopress/public</code> 目录的内容拷贝到 <code>octopress/_deploy</code> 目录下；</p>
  </li>
  <li>
    <p>将 <code>octopress/_deploy</code> 目录所对应的本地 <code>master</code> 分支的修改 <code>push</code> 到 <code>Github Pages</code> 远程库的 master 分支。</p>
  </li>
  <li>
    <p>下面可以看到 <code>master</code> 分支 <code>commit</code> 信息格式是 <code>"Site updated at 2015-10-14 12:52:36 UTC"</code> 。</p>
  </li>
</ol>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile
  system “git add -A”
  message = “Site updated at #{Time.now.utc}”
  system “git commit -m "#{message}"”</p>

<p># 前面说过 deploy_branch  = “master”
  Bundler.with_clean_env { system “git push origin #{deploy_branch}” }
{% endcodeblock %}</p>

<h2 id="section-1">二. 发布博文过程</h2>

<h3 id="section-2">2.1. 新建一篇博文</h3>

<p>打开终端，输入：</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ rake new_post[“Hi, octopress”]  # “Hi, octopress” 是文章的标题
{% endcodeblock %}</p>

<p>然后在 <code>octopress/source/_posts</code> 目录下我们会看到命名格式为 <code>"2015-10-14-Hi-octopress.markdown"</code> 的文件。</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile ，这是实现方法
  filename = “#{source_dir}/#{posts_dir}/#{Time.now.strftime(‘%Y-%m-%d’)}
  #{title.to_url}.#{new_post_ext}”
{% endcodeblock %}</p>

<p>打开新建的 <code>"2015-10-14-Hi-octopress.markdown"</code> 文件（我用的 <a href="http://mouapp.com/">Mou</a>，免费还好用），会发现头文件有如下内容（不要删除这段信息）：</p>

<p>{% codeblock lang:ruby %}
  —
  layout: post             #代表是一片博文
  title: “hello world” 
  date: 2015-10-14 19:59:22 +0800
  comments: true         #是否允许评论
  categories:             #分类
  —
{% endcodeblock %}</p>

<p>头部布局实现原理：</p>

<p>{% codeblock lang:ruby %}
  # 查看 Rakefile，头部布局实现
  open(filename, ‘w’) do |post|
  post.puts “—”
  post.puts “layout: post”
  post.puts “title: "#{title.gsub(/&amp;/,’&amp;’)}"”
  post.puts “date: #{Time.now.strftime(‘%Y-%m-%d %H:%M:%S %z’)}”
  post.puts “comments: true”
  post.puts “categories: “
  post.puts “—”
{% endcodeblock %}</p>

<p>在最后面的－－－下面就可以开始我们的正文啦～</p>

<h3 id="section-3">2.2. 预览新建的博文</h3>

<p>终端执行如下命令：</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ sudo rake generate
  $ rake preview
{% endcodeblock %}</p>

<p>在浏览器中打开<a href="http://localhost:4000/">http://localhost:4000</a>,即可以预览我们刚 post 的博客效果。</p>

<h3 id="section-4">2.3. 发布新建的博文</h3>

<p>终端执行：</p>

<p>{% codeblock lang:ruby %}
  $ sudo rake deploy  #deploy blog 到 Github Pages
{% endcodeblock %}</p>

<p>最后别忘了，push 下本地的 octopress 到 source：</p>

<p>{% codeblock lang:ruby %}
  $ git add .
  $ git commit -m’post test blog’
  $ git push origin source
{% endcodeblock %}</p>

<p>OK，到此，本地 octopress 博客部署到 Github Pages 完成了，打开访问你的个人博客看看效果吧。额，因为还没有做布局修改，留到下一篇介绍～</p>

<p class="info">部署这一块，自己花了挺长时间研究的，大体上理清了自己之前在做时的一些疑问。现在回头再看 Github 上的目录和本地的目录，一下子明朗了不少。不知道你是不是也觉得呢？</p>

<blockquote>
  <p>本篇参考：</p>

  <p><a href="http://octopress.org/docs/deploying/github/#custom_domains">Deploying to Github Pages</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 Octopress & Github Pages 搭建博客（一）]]></title>
    <link href="http://jonyfang.com/blog/2015/10/13/starting_blog_with_octopress_1/"/>
    <updated>2015-10-13T13:13:00+08:00</updated>
    <id>http://jonyfang.com/blog/2015/10/13/starting_blog_with_octopress_1</id>
    <content type="html"><![CDATA[<p class="info">一直以来想有个属于自己的博客空间，或许是出于一种归属感吧。就这样知道了 WordPress、Jekyll、Hexo 和 Octopress。一番对比后选择了 Octopress，相信追随大神的脚步应该不会错。Octopress 接触有一个多星期了，幸运的是经过一番折腾算是弄出点了模样。这里总结下 <strong><code>基于 Octopress 及 Github 搭建博客</code></strong> 的过程及自己 <strong><code>中间遇到的一些问题的解决办法</code></strong>。技术上不一定完全精确，若有大神围观望指正：)
<br /><br />
使用的是 Mac OS X 系统，不一定适用于 Windows 的童鞋。（勿拍砖…）
<br /><br />
这是最终的实现效果：<a href="http://jonyfang.github.io/" target="_blank"> I’m Jony</a></p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#octopress--jekyll--github-pages-" id="markdown-toc-octopress--jekyll--github-pages-">一. Octopress 与 Jekyll &amp; Github Pages 的关系</a></li>
  <li><a href="#section" id="markdown-toc-section">二. 准备工作</a>    <ul>
      <li><a href="#git" id="markdown-toc-git">2.1. 安装 Git</a></li>
      <li><a href="#ruby" id="markdown-toc-ruby">2.2. 安装 Ruby</a></li>
    </ul>
  </li>
  <li><a href="#octopress" id="markdown-toc-octopress">三. 本地安装 Octopress</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">四. 预览效果</a></li>
</ul>

<h2 id="octopress--jekyll--github-pages-">一. Octopress 与 Jekyll &amp; Github Pages 的关系</h2>

<p><code>Octopress</code> 是基于 <code>Jekyll</code> 的静态博客框架。</p>

<p><code>GitHub Pages</code> 这里用于显示托管在 <code>GitHub</code> 上的静态网页，是 GitHub 提供的一项服务。</p>

<p>总的来说也就是我们使用基于 <code>Jekyll</code> 的 <code>Octopress</code> 生成本地的静态网站，然后将静态的网站托管到 <code>Github</code> 为我们提供的 <code>Github Pages</code> 服务上。最后访问<code>博客地址</code>就可以显示我们的个人博客网站了。</p>

<h2 id="section">二. 准备工作</h2>

<h3 id="git">2.1. 安装 Git</h3>

<p>前往 Git 官网 <a href="http://git-scm.com/">点击这里</a> ，按下图提示下载安装（一般 Mac OS X自带 Git 环境，终端执行 git -v 可查看 Git 版本）。</p>

<p><img src="http://jonyfang.github.io/images/octopress/git_downloads.png" alt="git_downloads" /></p>

<h3 id="ruby">2.2. 安装 Ruby</h3>

<p>这是 <a href="https://www.ruby-lang.org/en/">Ruby 官网</a>，这里就不详细介绍 Ruby 啦，总之 Ruby 很 NB，后面静下心研究下。好吧，回到 Ruby 的安装。</p>

<p>打开终端，执行如下命令，<code>安装 RVM</code>，同时也会安装最新的 Ruby：</p>

<p>{% codeblock lang:ruby %}
  $ curl -L https://get.rvm.io | bash -s stable –ruby
{% endcodeblock %}</p>

<p>安装完，执行如下命令，<code>查看 Ruby 版本</code> (-v = –version)</p>

<p>{% codeblock lang:ruby %}
  $ ruby -v
{% endcodeblock %}</p>

<p>如果你的 Ruby 版本不低于 <code>1.9.3</code>，可直接跳转到 <code>安装 RubyGems</code>。否则需要执行如下命令：</p>

<p>{% codeblock lang:ruby %}
  $ rvm install 2.0.0
  $ rvm use 2.0.0
{% endcodeblock %}</p>

<p>安装 RubyGems：</p>

<p>{% codeblock lang:ruby %}
  $ rvm rubygems latest
{% endcodeblock %}</p>

<p>现在我们再执行命令 <code>ruby -v</code> 查看 Ruby版本，会看到现在已经是 2.0.0 了。</p>

<p>呼，准备工作搞定！</p>

<h2 id="octopress">三. 本地安装 Octopress</h2>

<p>前面做了那么多准备，主角总算要上场了。</p>

<p>首先，将 Octopress 的项目 <code>clone</code> 到本地，终端执行如下命令：</p>

<p>{% codeblock lang:ruby %}
  $ git clone git://github.com/imathis/octopress.git octopress
{% endcodeblock %}</p>

<p>进入 octopress 目录，安装 Octopress 所需要的<code>依赖库（dependencies）</code>：</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress</p>

<p># 安装过程中可能会遇到权限问题，我们需要在命令前面加上 sudo 再执行，并输入登录密码。
  # sudo 全称：super user do，也就是以 root 用户身份来执行</p>

<p>$ sudo gem install bundler
  $ bundle install
{% endcodeblock %}</p>

<p class="warning">这里在不翻墙的情况下，可能会遇到一个问题：<code>sudo gem install bundler</code> 执行后，一直没有响应。这是由于国内网络原因（你懂的），导致<a href="http://rubygems.org/" target="_blank"> rubygems.org </a>存放在 <code>Amazon S3</code> 上面的资源文件间歇性连接失败。所以你会遇到 <code>gem install rack</code> 或 <code>bundle install</code> 的时候半天没有响应的情况。</p>

<p>幸运的是国内某大神帮我们解决了这一心头大患，我们可以用<code>淘宝的 Ruby 镜像</code>来替换原来的镜像。只需终端执行下面的命令即可：</p>

<p>{% codeblock lang:ruby %}
  $ gem sources -a https://ruby.taobao.org/ -r https://rubygems.org/</p>

<p># 下一命令查看切换后结果
  $ gem sources -l
{% endcodeblock %}</p>

<p>然后会看到这样的输出：</p>

<p>{% codeblock lang:ruby %}
  <em>** CURRENT SOURCES **</em></p>

<p>https://ruby.taobao.org
{% endcodeblock %}</p>

<p>这就说明我们切换到<code>淘宝的 Ruby 镜像</code>了，再次安装 Octopress 所需要的依赖库就会发现现在可以了。</p>

<p>最后安装下默认主题：</p>

<p>{% codeblock lang:ruby %}
  # rake 全称：ruby make
  $ rake install
{% endcodeblock %}</p>

<p class="addition">上面提到的 <code>Ruby 镜像</code>问题，还有另外两种解决方法:
<br /><br />
（1）比较原始的方法——手动更改：打开 <code>octopress</code> 文件夹 -&gt; 打开 <code>Gemfile</code> 文件 -&gt; 将 <code>source "https://rubygems.org"</code> 改为 <code>source "https://ruby.taobao.org"</code> 就可以了。
<br /><br />
（2）第二种相对方便点，因为我们使用的是 Gemfile，所以我们可以用 Bundler 的 <a href="http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors">Gem 源代码镜像命令</a>，这样我们就不用改 Gemfile 的 source 了。</p>

<p>{% codeblock lang:ruby %}
  $ cd octopress
  $ bundle config mirror.https://rubygems.org https://ruby.taobao.org
{% endcodeblock %}</p>

<h2 id="section-1">四. 预览效果</h2>

<p>好，经过上面的功夫，我们已经在本地搭建了一个简易版的 Octopress 博客。</p>

<p>我们来看看效果吧。在终端执行命令：</p>

<p>{% codeblock lang:ruby %}
  $ sudo rake preview
{% endcodeblock %}</p>

<p>打开浏览器，输入 <code>http://localhost:4000/</code>，就可以看到效果了。虽然比较简陋，但让人挺高兴的，你觉得呢？</p>

<p><img src="http://jonyfang.github.io/images/octopress/octo_newpage.png" alt="octopress 本地显示效果" /></p>

<p>到这里，我们算是初步结束了本地安装过程，下一篇我们会把<code>本地的 Octopress</code> 部署到 <code>Github</code>，那么下篇再见喽～</p>

<blockquote>
  <p>本篇参考：</p>

  <p><a href="http://octopress.org/docs/setup/">Octopress Setup</a></p>

  <p><a href="http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors">Gem Source Mirrors</a></p>
</blockquote>
]]></content>
  </entry>
  
</feed>
