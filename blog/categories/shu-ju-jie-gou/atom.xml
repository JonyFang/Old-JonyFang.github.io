<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categorie: 数据结构 | I'm Jony]]></title>
  <link href="http://jonyfang.com/blog/categories/shu-ju-jie-gou/atom.xml" rel="self"/>
  <link href="http://jonyfang.com/"/>
  <updated>2016-09-04T11:30:41+08:00</updated>
  <id>http://jonyfang.com/</id>
  <author>
    <name><![CDATA[Jony Fang]]></name>
    <email><![CDATA[jony.chunfang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数据结构浅析（三）：线性表]]></title>
    <link href="http://jonyfang.com/blog/2016/01/10/data_structure03.linear_list/"/>
    <updated>2016-01-10T20:30:00+08:00</updated>
    <id>http://jonyfang.com/blog/2016/01/10/data_structure03.linear_list</id>
    <content type="html"><![CDATA[<p class="info">什么是线性表？
<br />
线性表的两大存储结构是什么？
<br />
各种存储结构是如何实现存取、插入删除等操作的？
<br />
本篇主要解答了这几个问题，感兴趣的话一起来看看吧～</p>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一. 什么是线性表？</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二. 线性表的顺序存储结构</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">2.1、顺序存储需要什么？</a></li>
    </ul>
  </li>
  <li><a href="#section-3" id="markdown-toc-section-3">三. 顺序存储结构的插入与删除</a>    <ul>
      <li><a href="#section-4" id="markdown-toc-section-4">3.1、获取元素</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">3.2、插入新元素</a></li>
      <li><a href="#section-6" id="markdown-toc-section-6">3.3、删除元素</a></li>
    </ul>
  </li>
  <li><a href="#section-7" id="markdown-toc-section-7">四. 线性表的链式存储结构</a>    <ul>
      <li><a href="#section-8" id="markdown-toc-section-8">4.1、头结点</a></li>
      <li><a href="#section-9" id="markdown-toc-section-9">4.2、最后一个结点</a></li>
    </ul>
  </li>
  <li><a href="#section-10" id="markdown-toc-section-10">五. 单链表</a>    <ul>
      <li><a href="#section-11" id="markdown-toc-section-11">5.1、单链表的读取</a></li>
      <li><a href="#section-12" id="markdown-toc-section-12">5.2、单链表的插入和删除</a></li>
      <li><a href="#section-15" id="markdown-toc-section-15">5.3、单链表的整表创建</a></li>
      <li><a href="#section-16" id="markdown-toc-section-16">5.4、单链表的整表删除</a></li>
      <li><a href="#section-17" id="markdown-toc-section-17">5.5、单链表结构与顺序结构对比</a></li>
    </ul>
  </li>
  <li><a href="#section-18" id="markdown-toc-section-18">六. 静态链表</a>    <ul>
      <li><a href="#section-19" id="markdown-toc-section-19">6.1、什么是静态链表？</a></li>
      <li><a href="#section-20" id="markdown-toc-section-20">6.2、静态链表的插入操作</a></li>
      <li><a href="#section-21" id="markdown-toc-section-21">6.3、静态链表的删除操作</a></li>
      <li><a href="#section-22" id="markdown-toc-section-22">6.4、静态链表优缺点</a></li>
    </ul>
  </li>
  <li><a href="#section-23" id="markdown-toc-section-23">七. 循环链表</a></li>
  <li><a href="#section-24" id="markdown-toc-section-24">八. 双向链表</a></li>
</ul>

<!-- more -->

<h2 id="section">一. 什么是线性表？</h2>

<p><code>线性表</code>从字面大概能想象出线的样式，那么怎么样才算是一个线性表呢？这里有一个定义：零个或多个数据元素的有限序列称为<code>线性表（List）</code>。元素之间是有序的，若有多个元素，则第一个元素无前驱，最后一个元素无后继，其他每个元素只有一个前驱和后继。</p>

<h2 id="section-1">二. 线性表的顺序存储结构</h2>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" alt="线性表的顺序存储示意图" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%A4%BA%E6%84%8F%E5%9B%BE2.png" alt="线性表的顺序存储示意图" /></p>

<p>线性表的<code>顺序存储结构</code>是线性表<code>物理结构</code>中的一种，指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p>

<h3 id="section-2">2.1、顺序存储需要什么？</h3>

<p>描述顺序存储结构需要的三个属性：
- 存储空间的起始位置：数组 data 的存储位置就是存储空间的存储位置；
- 线性表的最大存储容量：数组长度 MaxSize；
- 线性表的当前长度：length.</p>

<p>{% codeblock lang:c %}
 #define MAXSIZE 20 /* 存储空间的初始分配量 <em>/
typedef int ElemType; /</em> ElemType 类型视实际而定，这里为 int <em>/
typedef struct
{
    ElemType data[MAXSIZE]; /</em> 数组存储数据元素，最大值为 MAXSIZE */
    int length;
}  SqList;
{% endcodeblock %}</p>

<p><strong>这里的数组 data 长度与线性表长度有什么区别？</strong></p>

<p>数组长度在创建之初就已经知道了，这个量一般是不变的；
线性表长度是线性表中数据元素的个数，它会随着线性表的插入、删除操作而变化；
任何时刻，线性表长度小于或等于数组长度.</p>

<h2 id="section-3">三. 顺序存储结构的插入与删除</h2>

<h3 id="section-4">3.1、获取元素</h3>

<p>对于线性表的顺序存储结构，如果我们要实现 GetElem 操作，只需将线性表 L 中第 i 个位置的元素值返回即可.</p>

<p>{% codeblock lang:c %}
 #define OK 1
 #define ERROR 0
 #define TRUE 1
 #define FALSE 0
 typedef int Status;  /* Status 的值是函数的结果状态，如 OK 等 */</p>

<p>/* 初始条件：顺序线性表 L 已存在，1 &lt;= i &lt;= ListLength(L) <em>/
 /</em> 操作结果：用 e 返回 L 中第 i 个数据元素的值 */
 Status GetElem(SqList L; int i, ElemType *e)
 {
    if (L.length == 0 || i &lt; 1 || i &gt; L.length)
        return ERROR;
    * e = L.data[i - 1];</p>

<pre><code>return OK;  } {% endcodeblock %}
</code></pre>

<h3 id="section-5">3.2、插入新元素</h3>

<p>如果我们要实现 Listin-sert(*L, i, e)，即怎么在线性表 L 中的第 i 个位置插入新元素 e？这里就用到了插入算法。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B.png" alt="插入元素过程" /></p>

<p><strong>插入算法思路：</strong> 
- 如果插入位置不合理，抛出异常；
- 如果线性表长度 &gt;= 数组长度，抛出异常或动态增加容量；
- 从最后一个元素开始向前遍历到第 i 个位置，分别将它们都向后移动一个位置；
- 将要插入元素填入位置 i 处，线性表长+1.</p>

<p>{% codeblock lang:c %}
/* 初始条件：顺序线性表 L 已存在，1 &lt;= i &lt;= ListLength(L) <em>/
/</em> 操作结果：在 L 中第 i 个位置之前插入新的数据元素 e，L 长度为加 1 */
Status ListInsert(SqList *L, int i, ElemType e)
{
    int k;</p>

<pre><code>/* 顺序线性表已经满 */
if (L-&gt;length == MAXSIZE) 
    return ERROR;

/* 当i不在范围内时 */
if (i &lt; 1 || i &gt; L-&gt; length + 1) 
    return ERROR;

/* 若插入数据位置不在表尾 */
if (i &lt;= L-&gt;Length) 
{
    /*将要插入位置后数据元素向后移动一位 */
    for (k = L-&gt;length - 1; k &gt;= i -1; k--) 
        L-&gt;data[k + 1] = L-&gt;data[k];
}

L-&gt;data[i - 1] = e; /* 将新元素插入 */
L-&gt;length++;
return OK; } {% endcodeblock %}
</code></pre>

<h3 id="section-6">3.3、删除元素</h3>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B.png" alt="删除元素过程" /></p>

<p><strong>删除算法思路：</strong>
- 如果删除位置不合理，抛出异常；
- 取出删除元素；
- 从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；
- 线性表长 -1.</p>

<p>{% codeblock lang:c %}
/* 初始条件：顺序线性表L已存在，1≤i≤
   ListLength(L) <em>/
/</em> 操作结果：删除 L 的第 i 个数据元素，并用 e 返回
   其值，L 的长度 -1 <em>/
Status ListDelete(SqList *L, int i, ElemType *e)
{
    int k;
    if (L-&gt;length == 0)
        return ERROR;
    if (i &lt; 1 || i &gt; L-&gt;length)
        return ERROR;
    *e = L-&gt;data[i - 1];
    /</em> 如果删除不是最后位置 <em>/
    if (i &lt; L-&gt;length)
    {
        /</em> 将删除位置后继元素前移 */
        for (k = i; k &lt; L-&gt;length; k++)
            L-&gt;data[k - 1] = L-&gt;data[k];
    }
    L-&gt;length–;
    return OK;
}
{% endcodeblock %}</p>

<p><strong>线性表的顺序存储结构时间复杂度</strong>
- 在存和取数据元素时，在任何位置，时间复杂度都为 O(1)；
- 插入、删除时，（平均）时间复杂度为 O(n).</p>

<p><strong>顺序存储结构优缺点</strong>
- 优：可快速存取表中任一位置元素；
- 缺：插入、删除操作需移动大量元素；当线性表长度变化大时，无法确定存储空间容量；存储空间的浪费.</p>

<h2 id="section-7">四. 线性表的链式存储结构</h2>

<p>在顺序结构中，每个数据元素只需存数据元素的信息就可以了。而链式结构中需要存储两种数据 – <code>数据域</code>、<code>指针域</code>，两部分信息组成的数据元素，称为节点（Node）.</p>

<p><code>数据域</code>用来存储数据元素信息；
<code>指针域</code>用来存储直接后继地址.</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="单链表" /></p>

<h3 id="section-8">4.1、头结点</h3>

<p><code>头结点</code>的数据域，可以不存储任何信息，也可以存储如线性表的长度等信息；头结点指针域存储第一个非空结点的地址，若线性表为空表，头结点指针域为 NULL。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="带头结点的单链表" /></p>

<p><strong>C 语言创建<code>单链表</code>:</strong></p>

<p>{% codeblock lang:c %}
/* 线性表的单链表存储结构 */
typedef struct Node
{
	ElemType data;
	struct Node *next;
} Node;</p>

<p>/* 定义 LinkList */
typedef struct Node *LinkList
{% endcodeblock %}</p>

<h3 id="section-9">4.2、最后一个结点</h3>

<p><code>最后一个结点</code>指针用 NULL 或 ‘^’ 表示。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E7%BB%93%E7%82%B9.png" alt="最后一个结点" /></p>

<p>假设 <code>p</code> 是指向线性表第 i 个元素的<code>指针</code>，则该<code>结点 a(i)</code> 的数据域我们可以用 <code>p-&gt;data</code> 来表示，<code>p-&gt;data</code> 的值是一个数据元素，结点 <code>a(i)</code> 的指针域可以用 <code>p-&gt;next</code>来表示，<code>p-&gt;next</code> 的值是一个指针。如果 <code>p-&gt;data = a(i)</code>，那么 <code>p-&gt;next-&gt;data = a(i+1)</code></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%85%B3%E7%B3%BB.png" alt="p-&gt;data, p-&gt;next-&gt;data" /></p>

<h2 id="section-10">五. 单链表</h2>

<h3 id="section-11">5.1、单链表的读取</h3>

<p>获取单链表第 i 个数据的算法思路：
- 声明一个<code>指针 p</code> 指向链表第一个结点，<code>初始化 j</code> 从 1 开始；
- 当 <code>j&lt;i</code> 时，就遍历链表，让 <code>p</code> 的指针向后移动，不断指向下一结点，<code>j</code> 累加 1；
- 若到链表末尾 <code>p</code> 为空，则说明<code>第 i 个结点</code>不存在；
- 否则查找成功，返回<code>结点 p</code> 的数据。</p>

<p>实现算法代码：</p>

<p>{% codeblock lang:c %}
/* 初始条件：顺序线性表 L 已存在，1 ≤ i ≤ ListLength(L) <em>/
/</em> 操作结果：用 e 返回 L 中第 i 个数据元素的值 */
Status GetElem(LinkList L, int i, ElemType *e)
{
	int j;
	LinkList p;
	p = L-&gt;next;
	j = 1;</p>

<pre><code>while(p &amp;&amp; j &lt; i)
{
	p = p-&gt;next;
	++j;
}

/* 第 i 个结点不存在 */
if(!p || j &gt; i)
	return ERROR;
	
*e = p-&gt;data;
return OK; } {% endcodeblock %}
</code></pre>

<p>上面代码很容易理解，从头找到第 i 个结点为止。查找的时间复杂度为 O(n)。</p>

<h3 id="section-12">5.2、单链表的插入和删除</h3>

<h4 id="section-13">1)、单链表插入结点</h4>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9.png" alt="插入结点" /></p>

<p>实现思路如下：</p>

<p>{% codeblock lang:c %}
s-&gt;next = p-&gt;next;
p-&gt;next = s;
{% endcodeblock %}</p>

<p><code>单链表插入结点</code>算法实现代码如下：</p>

<p>{% codeblock lang:c %}
/* 初始条件：顺序线性表 L 已存在，1 ≤ i ≤ ListLength(L) <em>/
/</em> 操作结果：在 L 中第 i 个结点位置之前插入新结点 e，L长度+1 */
Status ListInsert(LinkList *L, int i, ElemType e)
{
	int j;
	LinkList p, s;
	p = *L;
	j = 1;</p>

<pre><code>/* 寻找第 i - 1 个结点 */
while(p &amp;&amp; j &lt; i)
{
	p = p-&gt;next;
	++j;
}

/* 第 i 个结点不存在 */
if(!p || j &gt; i)
	return ERROR;

/* 生成新结点（C 标准函数） */
s = (LinkList)malloc(sizeof(Node));

s-&gt;data = e;
s-&gt;next = p-&gt;next;
p-&gt;next = s;
return OK; } {% endcodeblock %}
</code></pre>

<blockquote>
  <p><code>s = (LinkList)malloc(sizeof(Node));</code> 这里用到了 C 语言的 <code>malloc</code> 标准函数，实质上就是拿出一块空的内存，用来存放新的<code>结点 s</code>。</p>
</blockquote>

<h4 id="section-14">2)、单链表删除结点</h4>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9.png" alt="删除结点" /></p>

<p><strong>实现思路如下：</strong></p>

<p>{% codeblock lang:c %}
q = p-&gt;next;
p-&gt;next = q -&gt;next;
{% endcodeblock %}</p>

<p><strong><code>单链表删除结点</code>算法实现代码如下：</strong></p>

<p>{% codeblock lang:c %}
/* 初始条件：顺序线性表 L 已存在，1 ≤ i ≤ ListLength(L) <em>/
/</em> 操作结果：删除 L 的第 i 个结点，并用 e 返回其值，L 的长度 -1 */
Status ListDelete(LinkList *L, int i, ElemType *e)
{
	int j;
	LinkList p, q;
	p = *L;
	j = 1;</p>

<pre><code>while(p-&gt;next &amp;&amp; j &lt; i)
{
	p = p-&gt;next;
	++j;
}

if(!(p-&gt;next) || j &gt; i)
	return ERROE;

q = p-&gt;next;
p-&gt;next = q-&gt;next;
*e = q-&gt;data;
free(q);

return OK; } {% endcodeblock %}
</code></pre>

<blockquote>
  <p><code>free(q);</code>这里用到了 C 语言的标准函数 free，作用是释放一个结点的内存。</p>
</blockquote>

<p>在我们不知道第 <code>i</code> 个结点的指针位置时，假设我们从 <code>i</code> 位置，插入 <code>n</code> 个结点。顺序存储结构的时间复杂度为 <code>O(n^2)</code>，链式存储结构的时间复杂度为 <code>O(n)</code>。显然单链表数据结构插入和删除操作，比顺序存储结构效率要高。</p>

<h3 id="section-15">5.3、单链表的整表创建</h3>

<p>首先创建一个空的单链表，然后插入一个个新结点，新结点插入一般用两种方式 – <code>头插法</code>、<code>尾插法</code>。
- <code>头插法</code>：每次新结点都插在第一的位置；
- <code>尾插法</code>：每次新结点都插在终端结点的后面。</p>

<p><strong>头插法算法实现代码：</strong></p>

<p>{% codeblock lang:c %}
/* 随机产生 n 个元素的值，建立表头结点的单链线性表 L（头插法） */
void CreatListHead(LinkList *L, int n)
{
	LinkList p;
	int i;</p>

<pre><code>/* 初始化随机种子数 */
srand(time(0));

*L = (LinkList)malloc(sizeof(Node));

/* 创建一个带头结点的单链表 */
(*L)-&gt;next = NULL;

for(i = 0; i &lt; n; i++)
{
	p = (LinkList)malloc(sizeof(Node));
	
	/* 随机生成 100 以内的数 */
	p-&gt;data = rand() % 100 + 1;
	p-&gt;next = (*L)-&gt;next;
	(*L)-&gt;next = p;
} } {% endcodeblock %}
</code></pre>

<p>算法实现过程根据示意图很容易理解。上面代码中用到了 <code>srand(time(0))</code>，这里的目的是初始化一个随机数种子。实质上就是后面每次 <code>rand()</code> 时，不同时刻可以拿到不同的数，这个数就是 1970.1.1 至今的秒数。这样就能确保每次我们拿到的都是不同的数字。</p>

<p><strong>尾插法算法实现代码：</strong></p>

<p>{% codeblock lang:c %}
/* 随机产生 n 个元素的值，建立带表头结点的单链表 L（尾插法） */
void CreatListTail(LinkList *L, int n)
{
	LinkList p, r;
	int i;</p>

<pre><code>srand(time(0));
*L = (LinkList)malloc(sizeof(Node));
r = *L;
for(i = 0; i &lt; n; i++)
{
	p = (Node *)malloc(sizeof(Node));
	p-&gt;data = rand() % 100 + 1;
	r-&gt;next = p;
	r = p;
}

r-&gt;next = NULL; } {% endcodeblock %}
</code></pre>

<p>了解头插法后看尾插法应该很容易理解了。</p>

<h3 id="section-16">5.4、单链表的整表删除</h3>

<p>算法实现代码如下：</p>

<p>{% codeblock lang:c %}
/* 初始条件：单链表 L 已存在 <em>/
/</em> 操作结果：将 L 重置为空表 <em>/
Status ClearList(LinkList *L)
{
	LinkList p, q;
	p = (</em>L)-&gt;next;</p>

<pre><code>while(p)
{
	q = p-&gt;next;
	free(p);
	p = q;
}

(*L)-&gt;next = NULL;
return OK; } {% endcodeblock %}
</code></pre>

<h3 id="section-17">5.5、单链表结构与顺序结构对比</h3>

<ul>
  <li>若线性表需要频繁查找，很少进行插入删除操作，宜采用<code>顺序存储结构</code>。若需要频繁插入删除，宜采用<code>单链表结构</code>。如游戏开发中，对于用户注册的个人信息，注册时插入数据后绝大多数只是读取，可以考虑用顺序存储结构；而游戏中玩家的武器装备列表，随着玩家的游戏进度，可能会随时增加或删除，单链表结构更合适。这里是简单类比，实际考虑的会更多。</li>
  <li>当线性表中的元素个数变化较大或者不确定元素个数，最好用<code>单链表结构</code>，这样不需要考虑存储空间大小问题。如果知道线性表大致长度（像一年 12 月，一周 7 天…），这时<code>顺序存储结构</code>效率会高很多。</li>
</ul>

<h2 id="section-18">六. 静态链表</h2>

<p>对于C 语言，它具有指针能力，使得它可以方便地操作内存中的地址和数据；对于 Objective - C 之类面向对象的语言，因为他们有对象引用机制，间接实现了指针的一些作用；但对于一些早期的编程高级语言（Basic 等），它们没有指针，按前面的方法链表结构就无法实现了。但方法总是会有的，就诞生了静态链表。</p>

<h3 id="section-19">6.1、什么是静态链表？</h3>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A81.png" alt="静态链表" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A82.png" alt="静态链表" /></p>

<p>首先我们让数组的元素都是由两个数据域组成，<code>data</code>和<code>cur</code>。也就是说，数组的每一个下标都对应一个<code>data</code>和一个<code>cur</code>。
数据域<code>data</code>用来存放数据元素，也就是通常我们要处理的数据；而游标<code>cur</code>相当于单链表中的<code>next</code>指针，存放该元素的后继在数组中的下标。我们把这种用数组描述的链表叫做<code>静态链表</code>。
数组的第一个元素，即下标为 0 的元素的 <code>cur</code> 就存放备用链表的第一个结点的下标；而数组的最后一个元素的 <code>cur</code> 则存放第一个有数值的元素的下标，相当于单链表的头节点作用，当整个链表为空时，则为 <code>0</code>，表示无指向。</p>

<p>初始化代码如下：</p>

<p>{% codeblock lang:c %}
/* 线性表的静态链表存储结构 */
 #define MAXSIZE 1000                   <br />
 typedef struct
 {
    ElemType data;
    int cur;                           <br />
 } StaticLinkList[MAXSIZE];</p>

<p>/* 将一维数组space中各分量链成一备用链表， <em>/
 /</em> space[0].cur为头指针，”0”表示空指针 <em>/
 Status InitList(StaticLinkList space)
 {
    int i;
    for (i = 0; i &lt; MAXSIZE - 1; i++)
        space[i].cur = i + 1;
    /</em> 目前静态链表为空，最后一个元素的cur为0 */
    space[MAXSIZE - 1].cur = 0;  <br />
	return OK;
 }
{% endcodeblock %}</p>

<h3 id="section-20">6.2、静态链表的插入操作</h3>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.png" alt="静态链表的插入操作" /></p>

<p>在动态链表中，结点的申请和释放分别借用<code>malloc()</code>和<code>free()</code>两个函数来实现。在静态链表中，操作的是数组，不存在像动态链表的结点申请和释放问题，所以我们需要自己实现这两个函数，才可以做插入和删除的操作。
为辨明数组中哪些分量未被使用，将所有未被使用过的及已被删除的分量用游标链成一个备用的链表，每当进行插入时，便可以从备用链表上取得第一个结点作为待插入的新结点。如下代码：</p>

<p>{% codeblock lang:c %}
/* 若备用空间链表非空，则返回分配的结点下标，否则返回0 <em>/
int Malloc_SLL(StaticLinkList space)
{
    /</em> 当前数组第一个元素的cur存的值，就是要返回的第一个备用空闲的下标 */
    int i = space[0].cur;</p>

<pre><code>/* 由于要拿出一个分量来使用了，所以我们就得把它的下一个分量用来做备用 */
if (space[0].cur)
	space[0].cur = space[i].cur;
return i; }
</code></pre>

<p>/* 在L中第i个元素之前插入新的数据元素e  <em>/
Status ListInsert(StaticLinkList L, int i, ElemType e)
{
    int j, k, l;
    /</em> 注意 k 是最后一个元素的下标 */
    k = MAX_SIZE - 1;                 <br />
    if (i &lt; 1 || i &gt; ListLength(L) + 1)
        return ERROR;</p>

<pre><code>/* 获得空闲分量的下标 */
j = Malloc_SSL(L);                  
if (j)
{
   /* 将数据赋值给此分量的 data */
   L[j].data = e;                  
   /* 找到第i个元素之前的位置 */
   for (l = 1; l &lt;= i - 1; l++)    
       k = L[k].cur;
   /* 把第i个元素之前的cur赋值给新元素的cur */
   L[j].cur = L[k].cur;        
   /* 把新元素的下标赋值给第i个元素之前元素的cur */
   L[k].cur = j;                   
   return OK;
 }
 
 return ERROR;
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3 id="section-21">6.3、静态链表的删除操作</h3>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png" alt="静态链表的删除操作" /></p>

<p>和插入操作原理相同，删除操作代码如下：</p>

<p>{% codeblock lang:c %}
/* 删除在 L 中第 i 个数据元素 e */
Status ListDelete(StaticLinkList L, int i)
{
    int j, k;
    if (i &lt; 1 || i &gt; ListLength(L))
        return ERROR;
    k = MAX_SIZE - 1;
    for (j = 1; j &lt;= i - 1; j++)
        k = L[k].cur;
    j = L[k].cur;
    L[k].cur = L[j].cur;
    Free_SSL(L, j);
	return OK;
}</p>

<p>/* 将下标为k的空闲结点回收到备用链表 <em>/
void Free_SSL(StaticLinkList space, int k)
{
    /</em> 把第一个元素 cur 值赋给要删除的分量 cur <em>/
    space[k].cur = space[0].cur;
    /</em> 把要删除的分量下标赋值给第一个元素的 cur */
	space[0].cur = k;
}</p>

<p>/* 初始条件：静态链表 L 已存在。操作结果：返回 L 中数据元素个数 */
int ListLength(StaticLinkList L)
{
    int j = 0;
    int i = L[MAXSIZE - 1].cur;
    while (i)
    {
        i = L[i].cur;
        j++;
    }</p>

<pre><code>return j; } {% endcodeblock %}
</code></pre>

<h3 id="section-22">6.4、静态链表优缺点</h3>

<ul>
  <li>优点：在插入删除操作时，只需要修改游标，不需要移动元素；</li>
  <li>缺点：失去顺序存储结构随机存取的特性，存储需要的表长难以确定。</li>
</ul>

<p>静态链表给没有指针的高级语言设计了一种实现单链表能力的方法，实际中不一定用到，但这个是思想很赞的。</p>

<h2 id="section-23">七. 循环链表</h2>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E7%A9%BA%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="空循环链表" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%9E%E7%A9%BA%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="非空循环链表" /></p>

<p>将单链表中<code>终端结点</code>的指针由空指针指向<code>头结点</code>，使单链表形成一个环，这种头尾相连的单链表称为<code>单循环链表</code>，简称<code>循环链表</code>。</p>

<p>循环链表中，从任何一个结点出发，可以访问到链表的全部结点。</p>

<p>在当循环列表中，访问第一个结点的时间复杂度是 O(1)；而访问最后一个结点的时间复杂度是 O(n)。那有没有可能，用 O(1) 时间访问到最后一个节点呢？
这里我们改造下循环链表，用指向最后一个结点的尾指针，不用头指针，就可以很方便的查找头结点和尾结点了。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%B0%BE%E6%8C%87%E9%92%88.png" alt="尾指针" /></p>

<p>尾指针有什么方便之处呢？看下下面这两个链表的合并。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%90%88%E5%B9%B6%E4%B8%A4%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20-%20%E5%89%8D.png" alt="合并两循环链表 - 前" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%90%88%E5%B9%B6%E4%B8%A4%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20-%20%E5%90%8E.png" alt="合并两循环链表 - 后" /></p>

<p>{% codeblock lang:c %}
/* 保存A表的头结点，即① */
p = rearA-&gt;next;</p>

<p>/*将本是指向B表的第一个结点（不是头结点） */
rearA-&gt;next = rearB-&gt;next-&gt;next;</p>

<p>/* 赋值给reaA-&gt;next，即② */
q = rearB-&gt;next;</p>

<p>/* 将原A表的头结点赋值给rearB-&gt;next，即③ */
rearB-&gt;next = p;</p>

<p>/* 释放 q */
free(q);
{% endcodeblock %}</p>

<h2 id="section-24">八. 双向链表</h2>

<p>双向链表中结点拥有两个指针域，一个指向直接前驱，一个指向直接后继。</p>

<p>{% codeblock lang:c %}
/* 线性表的双向链表存储结构 <em>/
typedef struct DulNode
{
    ElemType data;
    struct DuLNode *prior;    /</em> 直接前驱指针 <em>/
    struct DuLNode *next;     /</em> 直接后继指针 */
} DulNode, *DuLinkList;
{% endcodeblock %}</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E7%A9%BA%E9%93%BE%E8%A1%A8.png" alt="双向链表的循环带头结点的空链表" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E9%9D%9E%E7%A9%BA%E7%9A%84%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="非空的循环的带头结点的双向链表" /></p>

<p>{% codeblock lang:c %}
/* 链表中的某一结点 p */
p-&gt;next-&gt;prior = p = p-&gt;prior-&gt;next
{% endcodeblock %}</p>

<p>假设存储元素 e 的结点 s，要实现将结点 s 插入到结点 p 和 p-&gt;next 之间，如下：</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E7%BB%93%E7%82%B9%E6%8F%92%E5%85%A5.png" alt="结点插入" /></p>

<p>{% codeblock lang:c %}
/* 把p赋值给s的前驱，如图中① */
s-&gt;prior = p;</p>

<p>/* 把p-&gt;next赋值给s的后继，如图中② */
s-&gt;next = p-&gt;next;</p>

<p>/* 把s赋值给p-&gt;next的前驱，如图中③ */
p-&gt;next-&gt;prior = s;</p>

<p>/* 把s赋值给p的后继，如图中④ */
p-&gt;next = s;
{% endcodeblock %}</p>

<p>理解了插入操作，删除操作就比较简单了，示意图如下：</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_003%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9%20p.png" alt="删除结点 p" /></p>

<p>{% codeblock lang:c %}
/* 把p-&gt;next赋值给p-&gt;prior的后继，如图中① */
p-&gt;prior-&gt;next = p-&gt;next;</p>

<p>/* 把p-&gt;prior赋值给p-&gt;next的前驱，如图中② */
p-&gt;next-&gt;prior = p-&gt;prior;</p>

<p>/* 释放结点 */
free(p);
{% endcodeblock %}</p>

<blockquote>
  <p><strong>本篇参考：</strong>
<br /><br />
<a href="http://book.douban.com/subject/6424904/">大话数据结构</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构浅析（二）：算法]]></title>
    <link href="http://jonyfang.com/blog/2016/01/02/data_structure02.algorithm/"/>
    <updated>2016-01-02T18:01:00+08:00</updated>
    <id>http://jonyfang.com/blog/2016/01/02/data_structure02.algorithm</id>
    <content type="html"><![CDATA[<p class="info">我们常常会看到<a href="http://www.douban.com/search?cat=1001&amp;q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95">《数据结构与算法》</a>之类的书，那么数据结构和算法为什么会在一起呢？通过上一篇 <a href="http://jonyfang.com/blog/2015/12/25/the_basic_conception_in_data_structure/">数据结构基本概念</a> 我们知道，数据结构是互相之间存在一种或多种特定关系的数据元素的集合。这里的 <code>一种或多种特定关系</code>的处理就涉及到算法，所以对于完整的程序设计 <code>数据结构</code> 和 <code>算法</code> 都很重要。</p>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一. 什么是算法？</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二. 算法的特征</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">三. 算法设计的要求</a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">3.1、正确性</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">3.2、可读性</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">3.3、健壮性</a></li>
      <li><a href="#section-6" id="markdown-toc-section-6">3.4、时间效率高和存储量低</a></li>
    </ul>
  </li>
  <li><a href="#section-7" id="markdown-toc-section-7">四. 算法时间复杂度</a>    <ul>
      <li><a href="#section-8" id="markdown-toc-section-8">4.1、什么是算法时间复杂度？</a></li>
      <li><a href="#section-9" id="markdown-toc-section-9">4.2、怎么分析出算法的时间复杂度？</a></li>
      <li><a href="#section-10" id="markdown-toc-section-10">4.3、常数阶</a></li>
      <li><a href="#section-11" id="markdown-toc-section-11">4.4、线性阶</a></li>
      <li><a href="#section-12" id="markdown-toc-section-12">4.5、对数阶</a></li>
      <li><a href="#section-13" id="markdown-toc-section-13">4.6、平方阶</a></li>
      <li><a href="#section-14" id="markdown-toc-section-14">4.7、常见时间复杂度</a></li>
    </ul>
  </li>
  <li><a href="#section-15" id="markdown-toc-section-15">五. 算法空间复杂度</a></li>
  <li><a href="#section-16" id="markdown-toc-section-16">六. 总结</a></li>
</ul>

<!-- more -->

<p>本篇主要介绍算法的一些概念内容，方便后面的数据结构学习。</p>

<h2 id="section">一. 什么是算法？</h2>
<p><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">算法（Algorithm）</a> 英文词最早是由 9 世纪 <a href="https://zh.wikipedia.org/wiki/%E8%8A%B1%E6%8B%89%E5%AD%90%E7%B1%B3">波斯数学家花拉子米</a> 提出，<a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95">欧几里得算法</a>被人们认为是史上第一个算法。如今普遍对算法的定义是：算法是决定特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p>

<p>简而言之也就是为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能，这就是算法了。</p>

<h2 id="section-1">二. 算法的特征</h2>

<p>算法具有五个基本特征：<code>输入</code>、<code>输出</code>、<code>有穷性</code>、<code>确定性</code>、<code>可行性</code></p>

<p>前面三个从字面很容易理解，简单说下后面两个；
<strong><code>确定性</code></strong> 指算法在一定确定条件下，相同的输入只可能有唯一的输出结果；
<strong><code>可行性</code></strong> 指算法的每一步都可以通过执行有限次数完成。</p>

<h2 id="section-2">三. 算法设计的要求</h2>

<p>好算法的基本要求有：<code>正确性</code>、<code>可读性</code>、<code>健壮性</code>、<code>时间效率高和存储量低</code></p>

<h3 id="section-3">3.1、正确性</h3>

<p>算法的正确性指算法至少具有输入、输出、加工处理无歧义、能正确反映问题需求、能得倒问题的正确答案。
具体到程序大体分为下面 4 个层次：
- 算法程序没有语法错误；
- 算法程序对于合法的输入数据能够产生满足要求的输出结果；
- 算法程序对于非法的输入数据能够得出满足规格说明的结果；
- 算法程序对于极端的测试数据都有满足要求的输出结果。</p>

<p>证明一个复杂算法正确性代价很高，很难通过程序证明，一般采用数学方法证明，满足前 3 个层次就可以说是一个合格的算法了。</p>

<h3 id="section-4">3.2、可读性</h3>

<p>程序设计很多时候不是一个人搞定的，便于阅读理解还是很重要的。</p>

<h3 id="section-5">3.3、健壮性</h3>

<p>当输入数据不合法时，算法能做出相关处理，而不是产生异常或莫名其妙的结果，那么这就是健壮的算法。</p>

<h3 id="section-6">3.4、时间效率高和存储量低</h3>

<p>时间效率高是相对的。对于同一个问题，如果有多个算法可以解决，执行时间短的就是效率高的；</p>

<p>存储量指的是算法在执行过程中需要的最大内存和外部硬盘存储空间。我们生活中中希望花最少的钞票、最少的时间办最大的事，算法也是如此。</p>

<h2 id="section-7">四. 算法时间复杂度</h2>

<h3 id="section-8">4.1、什么是算法时间复杂度？</h3>

<p><code>算法时间复杂度</code>，是算法的时间量度，记作：T ( n ) = O ( f ( n ) )</p>

<p>n 表示问题规模；T ( n ) 表示语句总的执行次数；f ( n ) 是问题规模 n 的某个函数；大 O ( ) 用来记录<code>算法时间复杂度</code>，如我们常见的 O ( 1 )、O ( n ) 、O ( n^2 ) ….</p>

<p>一般情况下，随着 n 的增大， T ( n ) 增长最慢的算法为<code>最优算法</code>。</p>

<h3 id="section-9">4.2、怎么分析出算法的时间复杂度？</h3>

<p>如何分析出一个算法的时间复杂度呢？这里有个分析时间复杂度的<code>推导方法</code>：
- 用常数 1 取代运行时间中的所有加法常数；
- 在修改后的运行次数函数中，只保留最高阶项；
- 如最高阶项存在且不是 1 ，则去除与这个项相乘的常数。</p>

<p>下面分析一些简单的算法时间复杂度。</p>

<h3 id="section-10">4.3、常数阶</h3>

<p>例如：求 1+2+3+…+100 和
我们很容易想到的是 <code>高斯算法</code>，如下：</p>

<p>{% codeblock lang:c %}
int sum = 0, n = 100;         /* 执行一次 <em>/
sum = (1 + n) * n / 2;        /</em> 执行一次 <em>/
printf(“%d”, sum);            /</em> 执行一次 */
{% endcodeblock %}</p>

<p>由  <code>T ( n ) = O ( f ( n ) )</code>，找到依次数据，很容易得到 <code>f ( n ) = 3</code>；根据上面给出的推到方法，我们很容易得出 <code>高斯算法</code> 的时间复杂度为<code>O (1)</code></p>

<h3 id="section-11">4.4、线性阶</h3>

<p>举个例子，如下：</p>

<p>{% codeblock lang:c %}
for (i = 0; i &lt; n; i++ )
{
  /* 时间复杂度为 O (1) 的程序步骤序列 */
}
{% endcodeblock %}</p>

<p>循环体中的代码需要执行 <code>n 次</code>，即 <code>f( n ) = n</code>，所以它的时间复杂度为 <code>O( n )</code></p>

<h3 id="section-12">4.5、对数阶</h3>

<p>举例如下：</p>

<p>{% codeblock lang:c %}
int count = 1;
while (count &lt; n)
{
  count = count * 2;
}
{% endcodeblock %}</p>

<p>每次 count * 2 之后，就距离 n 更近一分。那么有多少个 2 相乘后大于 n 退出循环？ 数学表示来看也就是 2^x = n ，得到 x = log(2 为底 n 的对数） [<code>markdown</code> 写数学公式功底不够，理解就好…]，得出 T( n ) = logn;</p>

<h3 id="section-13">4.6、平方阶</h3>

<p><strong>下面是一个<code>循环嵌套</code>例子：</strong></p>

<p>{% codeblock lang:c %}
int i, j;
for (i = 0; i&lt; n; i ++)
{
    for (j = 0; j &lt; n; j++)
    {
        /* 时间复杂度为 O(1) 的程序步骤序列 */
    }
}
{% endcodeblock %}</p>

<p><code>外层</code>和<code>内层</code>的时间复杂度都是 <code>O(n)</code>，所以这段代码的时间复杂度是 <code>O(n^2)</code>.</p>

<p><strong>再看下面一个<code>循环嵌套</code>例子：</strong></p>

<p>{% codeblock lang:c %}
int i, j;
for (i = 0; i&lt; m; i ++)
{
    for (j = 0; j &lt; n; j++)
    {
        /* 时间复杂度为 O(1) 的程序步骤序列 */
    }
}
{% endcodeblock %}</p>

<p>外层和内层的时间复杂度依次为 <code>O(m)</code>, <code>O(n)</code>，所以这段代码的时间复杂度是 <code>O(m * n)</code></p>

<p><strong>接着再看一个例子：</strong></p>

<p>{% codeblock lang:c %}
int i, j;
for (i = 0; i &lt; n; i++)
{
   for (j = i; j &lt; n; j++)
    {
        /* 时间复杂度为 O(1) 的程序步骤序列*/
    }
}
{% endcodeblock %}</p>

<p>当 i = 0 时，内循环执行 n 次；当 i = 1 时，内循环执行 n-1 次；……；当 i = n -1时，执行 1 次。所以总的执行次数为：</p>

<p>{% codeblock lang:c %}
n + (n - 1) + (n - 2) + … + 1 = n(n + 1) / 2 = n^2 / 2 + n / 2
{% endcodeblock %}</p>

<p>根据前面的<code>推导方法</code>，很容易得到这段代码的<code>时间复杂度</code>为 <code>O(n^2)</code>.</p>

<h3 id="section-14">4.7、常见时间复杂度</h3>

<p>常见时间复杂度如表：</p>

<table>
  <thead>
    <tr>
      <th>执行次数</th>
      <th>函数阶</th>
      <th>非正式术语</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>12</td>
      <td>O(1)</td>
      <td>常数阶</td>
    </tr>
    <tr>
      <td>2n + 3</td>
      <td>O(n)</td>
      <td>线性阶</td>
    </tr>
    <tr>
      <td>3n^2 + 2n + 1</td>
      <td>O(n^2)</td>
      <td>平方阶</td>
    </tr>
    <tr>
      <td>6n^3 + 2n^2 + 3n +4</td>
      <td>O(n^3)</td>
      <td>立方阶</td>
    </tr>
    <tr>
      <td>5log2n + 20</td>
      <td>O(logn)</td>
      <td>对数阶</td>
    </tr>
    <tr>
      <td>2n + 3nlog2n + 19</td>
      <td>O(nlogn)</td>
      <td>nlogn 阶</td>
    </tr>
    <tr>
      <td>2^n</td>
      <td>O(2^n)</td>
      <td>指数阶</td>
    </tr>
  </tbody>
</table>

<p>常用时间复杂度所消耗时间从小到大依次为：</p>

<p>{% codeblock lang:c %}
 O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>

<p># 其中的 指数阶 和 阶乘阶 很少用到，你懂的…
{% endcodeblock %}</p>

<h2 id="section-15">五. 算法空间复杂度</h2>

<p>算法的<code>空间复杂度</code>通过计算算法所需的存储空间实现，计算公式： <code>S(n) = O( f( n ) )</code>，<code>n</code> 为问题的规模，<code>f(n)</code> 为语句关于 <code>n</code> 所占存储空间的函数。</p>

<p>通常，我们使用<code>时间复杂度</code>来指运行时间的需求，用<code>空间复杂度</code>指空间需求。</p>

<h2 id="section-16">六. 总结</h2>

<p>本篇提到的<code>算法时间复杂度</code>用处还是挺多的，后面自己写程序过程中也尽可能得降低时间复杂度。</p>

<blockquote>
  <p><strong>本篇参考：</strong>
<br /><br />
<a href="http://book.douban.com/subject/6424904/">大话数据结构</a>
<br />
<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">Wikipedia - 算法（Algorithm）</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构浅析（一）：数据结构基本概念]]></title>
    <link href="http://jonyfang.com/blog/2015/12/25/data_structure01.the_basic_conception_in_data_structure/"/>
    <updated>2015-12-25T22:01:00+08:00</updated>
    <id>http://jonyfang.com/blog/2015/12/25/data_structure01.the_basic_conception_in_data_structure</id>
    <content type="html"><![CDATA[<p class="info"><strong>首先会有个疑问，什么是数据结构呢？</strong>
<br />
数据结构（data structure），可以概括为是互相之间存在一种或多种特定关系的数据元素的集合。开篇配图来自网络…</p>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、数据结构起源</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、基本概念和术语</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">2.1、数据</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">2.2、数据元素</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">2.3、数据项</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">2.4、数据对象</a></li>
      <li><a href="#section-6" id="markdown-toc-section-6">2.5、数据结构</a></li>
    </ul>
  </li>
  <li><a href="#section-7" id="markdown-toc-section-7">三、逻辑结构和物理结构</a>    <ul>
      <li><a href="#section-8" id="markdown-toc-section-8">3.1、逻辑结构</a></li>
      <li><a href="#section-9" id="markdown-toc-section-9">3.2、物理结构</a></li>
    </ul>
  </li>
  <li><a href="#section-10" id="markdown-toc-section-10">四、抽象数据类型</a>    <ul>
      <li><a href="#section-11" id="markdown-toc-section-11">4.1、数据类型是什么？</a></li>
      <li><a href="#section-12" id="markdown-toc-section-12">4.2、抽象数据类型</a></li>
    </ul>
  </li>
  <li><a href="#section-13" id="markdown-toc-section-13">五、总结</a></li>
</ul>

<!-- more -->

<h2 id="section">一、数据结构起源</h2>

<p>1968年，美国 Donald E. Knuth 教授在《计算机程序设计艺术》第一卷《基本算法》中系统阐述了数据的逻辑结构和存储结构及其操作，开创了数据结构课程体系。</p>

<p>70年代初，大型程序相继出现，软件也开始相对独立，结构程序设计成为程序设计方法学主要内容，人们开始认为程序设计的实质是对确定的问题选择一种好的结构，加上设计一种好的算法。也就是 <strong>程序设计 = 数据结构 + 算法</strong></p>

<p>现实生活中，更多的不是解决一些数值计算问题，我们需要通过表、树、图等数据结构的帮助来更好地处理问题。</p>

<p>所以数据结构也是一门研究非数字计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科。（引用自<a href="http://book.douban.com/subject/6424904/">《大话数据结构》</a>）</p>

<h2 id="section-1">二、基本概念和术语</h2>

<h3 id="section-2">2.1、数据</h3>

<ul>
  <li>数据指的是能输入到计算机中，并能被计算机程序处理的对象。</li>
  <li>对于数值类型（整型、实型等），可以进行数值计算；
对于字符数据类型（声音、图像、视频等可通过编码转化为字符数据），可以进行非数值处理。</li>
</ul>

<h3 id="section-3">2.2、数据元素</h3>

<ul>
  <li>数据元素指组成数据的、有意义的基本单位，也被称为记录。</li>
  <li>如：一部电影里面的女主就是数据元素</li>
</ul>

<h3 id="section-4">2.3、数据项</h3>

<ul>
  <li>数据项是数据不可分割的最小单位，一个数据元素可以由若干数据项组成。</li>
  <li>如：一部电影里面女主的姓名、性别等都是数据项，恩，女主性别一般是女…</li>
</ul>

<h3 id="section-5">2.4、数据对象</h3>

<ul>
  <li>数据对象指性质相同的数据元素的集合，是数据的子集；</li>
  <li>数据对象简称数据
什么是性质相同呢？
性质相同指数据元素具有相同数量和类型的数据项；
如一部电影中每个角色（数据元素）都有姓名、性别（数据项），这些角色（数据元素）构成了一部电影，那么这部电影所有人物的集合我们可以想象成是一个数据对象。</li>
</ul>

<h3 id="section-6">2.5、数据结构</h3>

<ul>
  <li>数据结构指互相之间存在一种或多种特定关系的数据元素的集合；</li>
  <li>数据结构 = 数据元素 + 关系；
还得用上面的例子，一部电影可以想象成是一个数据结构，是由一个个人物（数据元素）和一个个串联的人物情节（关系）构成，例子有点勉强，大概意思都应该理解的…</li>
</ul>

<h2 id="section-7">三、逻辑结构和物理结构</h2>

<h3 id="section-8">3.1、逻辑结构</h3>

<ul>
  <li>逻辑结构指数据对象中数据元素之间的相互关系；</li>
  <li>逻辑结构分为 集合结构、线性结构、树形结构 和 图形结构；</li>
</ul>

<p>1). 集合结构：其中的数据元素除同属于一个集合外，之间没有其他关系；</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.jpg" alt="集合结构" /></p>

<p>2). 线性结构：其中的数据元素之间是一对一的关系；</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E7%BA%BF%E5%9E%8B%E7%BB%93%E6%9E%84.jpg" alt="线性结构" /></p>

<p>3). 树形结构：其中的数据元素之间存在一对多的层次关系；</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.jpg" alt="树形结构" /></p>

<p>4). 图形结构：其中的数据元素之间存在多对多的关系。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E5%9B%BE%E5%BD%A2%E7%BB%93%E6%9E%84.jpg" alt="图形结构" /></p>

<h3 id="section-9">3.2、物理结构</h3>

<ul>
  <li>物理结构指数据的逻辑结构在计算机中的存储形式；</li>
  <li>实际就是如何将数据元素存储到计算机存储器中。这里的存储器主要针对内存而言，像硬盘等外部存储器的数据组织通常使用文件结构来描述；</li>
  <li>数据元素的存储结构形式有 顺序存储 和 链式存储 两种；</li>
</ul>

<p>1).顺序存储结构</p>

<p>顺序存储结构：把数据元素存放在地址连续的的存储单元里，其数据间的逻辑关系和物理关系一致；</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt="顺序存储结构" /></p>

<p>2).链式存储结构</p>

<p>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的也可以是不连续的。数据元素的存储关系不反映其逻辑关系，用指针存放数据元素的地址，我们通过地址可以找到相关联数据元素的位置。</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt="链式存储结构" /></p>

<ul>
  <li>两种物理结构对比来看，链式存储更为灵活</li>
</ul>

<p class="info">逻辑结构面向问题，物理结构面向计算机，其基本目标是将数据及其逻辑关系存储到计算机的内存中。</p>

<h2 id="section-10">四、抽象数据类型</h2>

<h3 id="section-11">4.1、数据类型是什么？</h3>

<p>数据类型指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p>

<p>看起来有点模糊，接着往下看。</p>

<p>数据类型按照值的不同进行划分。在高级语言中，每个变量、常量、表达式都有各自取值范围。类型就用来说明变量或表达式的取值范围和所进行的操作。</p>

<p>计算机的内存是有限的，如果只是单纯计算 1+1 =2这样的整型数字运算，我们不需要开辟很大的内存空间，只要满足相应需求的内存空间就可以了。于是计算机领域的前辈们对数据进行分类，不同的数据类型拥有各自的取值范围。这样就可以更好利用有限的内存空间。</p>

<p>例如 C 语言中，数据类型可以分两类：
- 原子类型：不可再分割的基本类型。如整型、实型、字符型等基本数据类型；
- 结构类型：由若干类型组成，可再分解。如整型数组就是由若干整型数据组成的。</p>

<h3 id="section-12">4.2、抽象数据类型</h3>

<p><strong>1). 上面解释了什么是数据类型，那么为什么要把数据类型抽象出来呢？</strong></p>

<p>不同的计算机有不同的硬件系统，所以需要程序语言最终通过编译器或解释器转化成计算机能够识别的底层语言。然而在我们使用高级语言开发时，如计算 1+1 ，不管最终程序运行在什么计算机上，我们的目的只是为了实现 2 个整型数字的运算，不需要详细知道 CPU 为了实现 1+1 进行了几次开关操作。但无论什么计算机、什么计算机语言都会面临如整数运算这样的操作，那么可以考虑把它们抽象出来，只保留实现目标所必需的信息。</p>

<p><strong>2). 什么是抽象数据类型？</strong></p>

<p><strong>抽象数据类型（Abstract Data Type, ADT）</strong>:指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于他的一组逻辑特性，与其在计算机内部如何表示和实现无关。</p>

<p><strong>3). 抽象数据类型有什么意义？</strong></p>

<p>“抽象”的意义在于数据类型的数学抽象特性。一个抽象数据类型定义了一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</p>

<p>理论的东西说起来总是那么模糊，看一个例子就会发现清晰明了了。</p>

<p>还是之前整数计算的例子。计算机分很多种，大型机、小型机、PC、智能手机等等，但是任何一种都有“整型数据”，也都需要进行“整型数据”运算。那么这里的整型其实就是一个抽象数据类型，它在不同计算机内的实现方法可能不同，但定义的数学特性相同，所以在我们看来是相同的。</p>

<p class="info">抽象数据类型理论的东西提的比较多，概括下也就是为什么会有各种不同的数据类型，同时解释这些数据类型存在的意义是什么…</p>

<h2 id="section-13">五、总结</h2>

<p>直接上图吧，一图胜千言…</p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg" alt="数据结构层次" /></p>

<p><img src="http://7xob7d.com1.z0.glb.clouddn.com/data_structure_01%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E4%B8%8E%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84.jpg" alt="逻辑结构与物理结构" /></p>

<blockquote>
  <p><strong>本文参考：</strong>
<br /><br />
<strong><a href="http://book.douban.com/subject/6424904/">《大话数据结构》</a></strong>
<br /><br />
<strong><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E5%BE%B7%E7%BA%B3">Wikipedia - Donald E. Knuth</a></strong></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
